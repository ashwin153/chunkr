package com.chunkr.compress.chunkers;

import org.apache.commons.lang3.StringUtils;

/**
 * Chunkers are responsible for transforming binary bits to and from integers.
 * Different chunkers have different methods of performing the translation to
 * and from binary.
 * 
 * @author ashwin
 */
public abstract class Chunker {

	private int _chunkSize; 
	
	public Chunker(int chunkSize) {
		_chunkSize = chunkSize;
	}
	
	/**
	 * The chunk size represents the number of bits in integers generated by
	 * this chunker. Therefore, the chunk size must be a positive integer
	 * greater than 0 and less than or equal to 32 (size of an integer on most
	 * architectures).
	 * 
	 * @return chunk size
	 */
	public int getChunkSize() {
		return _chunkSize;
	}
	
	/**
	 * Chunks an array of input bits into integer values.
	 * @param bits
	 * @return chunked integers
	 */
	abstract public int[] chunk(boolean[] bits);
	
	/**
	 * Unchunks an array of chunked integers into bits.
	 * @param chunks
	 * @return unchunked bits
	 */
	abstract public boolean[] unchunk(int[] chunks);
	
	/**
	 * Unchunks an integer into bits. The returned array of bits will have size
	 * equal to chunkSize. The bits are returned from most significant to least
	 * significant.
	 * 
	 * @param value
	 * @return unchunked bits
	 */
	public final boolean[] unchunk(int value) {
		boolean[] unchunk = new boolean[getChunkSize()];
		String binary = StringUtils.leftPad(Integer.toBinaryString(value), getChunkSize(), '0');
		
		for(int i = 0; i < binary.length() && i < unchunk.length; i++)
			unchunk[i] = (binary.charAt(i) == '1') ? true : false;
		
		return unchunk;
	}
}
